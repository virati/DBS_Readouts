# %%
"""[Paper] Readout Limitations

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1S_rx4Vx0mioL7_kluiM3DFf_8Stju-xF
"""

import matplotlib.pyplot as plt
import numpy as np
# import reveng #make a library called reveng to do all your reverse engineering work

"""# Rational Assessment of Disease Readouts for Adaptive Deep Brain Stimulation

Efforts to engineer *biomarkers* of disease have grown rapidly in the last 10 years.
However, a framework to assess biomarkers, and more generally any physiologically-derived *readout* of a disorder, is lacking.

In this study, we take an *applied mathematical approach* to develop and demonstrate a framework that can be used to assess readouts more systematically.
This is a critical step in avoiding both overestimations and underestimations of readouts for adaptive DBS applications.


## Outline
* Re-referencings
* RvA vs AvR
* Fixed $\Gamma$ and Fixed H
* Fixed $\Gamma$ $\rightarrow$ Design H

## Re-Referencings

## RvA vs AvR
"""

# prompt: generate a multivariate normal of dimensions D x N
D = 10
N = 100
x = np.random.multivariate_normal(mean=np.zeros(D), cov=np.eye(D), size=N).T


def H(x, c): return np.dot(c.T, x)
def Gamma(x, c): return np.dot(c.T, x)


readout_coverage = np.ones((D, 1))
behavior_coverage = np.ones((D, 1))

# prune readout
prune_length = 5
readout_coverage[-prune_length:, ...] = 0

y = H(x, readout_coverage)
b = Gamma(x, behavior_coverage)

plt.imshow([readout_coverage, behavior_coverage])
plt.yticks(ticks=[0, 1], labels=['Readout', 'Behavior'])
plt.xlabel('Brain Node')
plt.show()

plt.scatter(y, b)
plt.xlabel('Readout')
plt.ylabel('Behavior')
plt.show()

# do a regression


class analysis:
    def __init__(self):
        pass

    def regression(self, input, output):
        pass

    def plot(self, x_axis, y_axis):
        plt.scatter(x_axis, y_axis)
        plt.show()


analysis.regression(y, b)

analysis.regression(b, y)
